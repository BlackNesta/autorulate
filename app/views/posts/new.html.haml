= provide(:title, "New Post")

%h1 New Post

%br

= form_with(model: @post, method: :post, local: true) do |f|
  = render 'shared/error_messages', object: @post
  = f.label :title
  %span.filter= f.text_field :title, class: "form-control", autocomplete: "off", required: true
  %br
  .form_fileds 
    .form_field
      = f.label :location
      %span.filter= f.text_field :location, class: "form-control", autocomplete: "off"
    .form_field
      = f.label :body
      %span.filter= f.select :body, options_for_select(@body_type), {include_blank: true}, {class: "form-control big-form", required: true}
    .form_field
      = f.label :brand
      %span.filter= f.select :brand, options_for_select(@brand), {include_blank: true}, {class: "form-control big-form", id: "brand-select", required: true}
    .form_field
      = f.label :model
      %span.filter= f.select :model, [], {}, {class: "form-control big-form", id: "model-select", disabled: true, required: true}
    .form_field
      = f.label :year
      %span.filter= f.number_field :year, class: "form-control", autocomplete: "off", required: true
    .form_field
      = f.label :km
      %span.filter= f.number_field :mileage, class: "form-control", autocomplete: "off", required: true
    .form_field
      = f.label :fuel_type
      %span.filter= f.select :fuel, options_for_select(@fuel_type), {include_blank: true}, {class: "form-control big-form", required: true}
    .form_field
      = f.label "Engine Displacement (cc)"
      %span.filter= f.number_field :cc, class: "form-control", autocomplete: "off", required: true
    .form_field
      = f.label :horsepower
      %span.filter= f.number_field :power, class: "form-control", autocomplete: "off", required: true
    .form_field
      = f.label :transmition_type
      %span.filter= f.select :transmition, options_for_select(@transmition_type), {include_blank: true}, {class: "form-control big-form", required: true }
    .form_field
      = f.label :gearbox_type
      %span.filter= f.select :gearbox, options_for_select(@gearbox_type), {include_blank: true}, {class: "form-control big-form", required: true}
    .form_field
      = f.label "Price(â‚¬)"
      %span.filter= f.number_field :price, class: "form-control", autocomplete: "off", required: true
  %br
  = f.label :descritpion
  .field 
    %span.filter= f.text_area :content, placeholder: "Add description...", class: "form-control", autocomplete: "off"
  .images
    - (1..10).each do |i|
      .image
        = image_tag("add-photo.png", id: "image-#{i}", onclick: "addPhoto(#{i})", style: "width: 200px; height: 200px; cursor:pointer;")
        = f.file_field "images[#{i}]", multiple: false, accept: "image/jpeg,image/gif,image/png", class: "post_images", style: "display:none", id: "post-images-#{i}", onchange:"readURL(this, #{i})"
  
  = f.submit "Add Post", class: "btn btn-primary"

:javascript
  $(".post_images").bind("change", function() {
    const size_in_megabytes = this.files[0].size/1024/1024;
    if (size_in_megabytes > 5) {
      alert("Maximum file size is 5MB. Please choose a smaller file.");
      $("#post_image").val("");
    }
  });

  function addPhoto(i) {
    $("#post-images-" + i).trigger('click')
  }

  function readURL(input, i) {
    if (input.files && input.files[0]) {
      var reader = new FileReader();
      reader.onload = function (e) {
        $('#image-' + i)
          .attr('src', e.target.result)
      };

      reader.readAsDataURL(input.files[0]);
    }
  }

  $("#brand-select").on("change", function(){
    var brand = this.value
    $("#model-select").empty()
    if (brand == "") {
      $("#model-select").prop( "disabled", true )
    } else {
      $("#model-select").prop( "disabled", false )
      $("#model-select").append($('<option>', {
                    value: "",
                    text: ""
                }));
      $.each(gon.model[brand].sort(), function( index , value){
        $("#model-select").append($('<option>', {
                    value: value,
                    text: value
                }));
      })
    }
  })